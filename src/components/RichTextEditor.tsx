import React, { useState, useRef, useEffect, useCallback } from 'react';
import { useEditor, EditorContent, Editor } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import Link from '@tiptap/extension-link';
import Table from '@tiptap/extension-table';
import TableRow from '@tiptap/extension-table-row';
import TableCell from '@tiptap/extension-table-cell';
import TableHeader from '@tiptap/extension-table-header';
import Image from '@tiptap/extension-image';
import TextAlign from '@tiptap/extension-text-align';
import TextStyle from '@tiptap/extension-text-style';
import Color from '@tiptap/extension-color';
import Highlight from '@tiptap/extension-highlight';
import Typography from '@tiptap/extension-typography';
import Underline from '@tiptap/extension-underline';
import Subscript from '@tiptap/extension-subscript';
import Superscript from '@tiptap/extension-superscript';
import TaskList from '@tiptap/extension-task-list';
import TaskItem from '@tiptap/extension-task-item';
import CodeBlockLowlight from '@tiptap/extension-code-block-lowlight';
import Placeholder from '@tiptap/extension-placeholder';
import { common, createLowlight } from 'lowlight';
import { FileDown, Plus, X, Type, Grid2x2 } from 'lucide-react';
import { Toolbar } from './editor/Toolbar';
import { BlockSelector } from './editor/BlockSelector';
import { BlockSelector as HtmlBlockSelector } from './editor/BlockHtmlSelector';
import { Extension } from '@tiptap/core';
import { Plugin } from 'prosemirror-state';
import { Decoration, DecorationSet } from 'prosemirror-view';
import ListItem from '@tiptap/extension-list-item';
import Dropcursor from '@tiptap/extension-dropcursor';
import Document from '@tiptap/extension-document';
import { useAutoSave } from '../hooks/useAutoSave';
import { autoSaveService } from '../services/autoSaveService';
import { useIdleDetection } from '../hooks/useIdleDetection';

// –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
import './editor/styles/editorStyles.css';
import './editor/styles/blockStyles.css';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è lowlight –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
const lowlightPlugin = createLowlight(common);

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –º–µ–Ω—é –±–ª–æ–∫–∞
interface BlockMenuProps {
  isOpen: boolean;
  onClose: () => void;
  position: { x: number; y: number };
  editor: Editor;
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–∞
const BlockMenu = ({ isOpen, onClose, position, editor }: BlockMenuProps) => {
  if (!isOpen) return null;

  const handleAddBlock = (type: string) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –±–ª–æ–∫–∞
    switch(type) {
      case 'heading1':
        editor.chain().focus().toggleHeading({ level: 1 }).run();
        break;
      case 'heading2':
        editor.chain().focus().toggleHeading({ level: 2 }).run();
        break;
      case 'heading3':
        editor.chain().focus().toggleHeading({ level: 3 }).run();
        break;
      case 'bulletList':
        editor.chain().focus().toggleBulletList().run();
        break;
      case 'orderedList':
        editor.chain().focus().toggleOrderedList().run();
        break;
      case 'taskList':
        editor.chain().focus().toggleTaskList().run();
        break;
      case 'blockquote':
        editor.chain().focus().toggleBlockquote().run();
        break;
      case 'codeBlock':
        editor.chain().focus().toggleCodeBlock().run();
        break;
      case 'horizontalRule':
        editor.chain().focus().setHorizontalRule().run();
        break;
      case 'table':
        editor.chain().focus()
          .insertTable({ rows: 3, cols: 3, withHeaderRow: true })
          .run();
        break;
      case 'image':
        const url = window.prompt('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        if (url) {
          editor.chain().focus().setImage({ src: url }).run();
        }
        break;
      default:
        break;
    }
    onClose();
  };

  return (
    <div 
      className="block-menu"
      style={{
        position: 'absolute',
        left: `${position.x}px`,
        top: `${position.y}px`,
        zIndex: 50,
      }}
    >
      <div className="bg-white dark:bg-gray-800 shadow-lg rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700">
        <div className="p-2">
          <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300 px-2 py-1">
            –ë–ª–æ–∫–∏
          </h3>
          
          <div className="grid grid-cols-1 gap-1 mt-1">
            <button 
              className="flex items-center text-left rounded px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700"
              onClick={() => handleAddBlock('heading1')}
            >
              <span className="text-xl font-bold">H1</span>
              <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1</span>
            </button>
            
            <button 
              className="flex items-center text-left rounded px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700"
              onClick={() => handleAddBlock('heading2')}
            >
              <span className="text-lg font-bold">H2</span>
              <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2</span>
            </button>
            
            <button 
              className="flex items-center text-left rounded px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700"
              onClick={() => handleAddBlock('heading3')}
            >
              <span className="text-base font-bold">H3</span>
              <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3</span>
            </button>

            <div className="my-1 border-t border-gray-200 dark:border-gray-700"></div>
            
            <button 
              className="flex items-center text-left rounded px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700"
              onClick={() => handleAddBlock('bulletList')}
            >
              <span className="text-lg">‚Ä¢</span>
              <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫</span>
            </button>
            
            <button 
              className="flex items-center text-left rounded px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700"
              onClick={() => handleAddBlock('orderedList')}
            >
              <span className="text-lg">1.</span>
              <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫</span>
            </button>
            
            <button 
              className="flex items-center text-left rounded px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700"
              onClick={() => handleAddBlock('taskList')}
            >
              <span className="text-lg">‚òê</span>
              <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</span>
            </button>

            <div className="my-1 border-t border-gray-200 dark:border-gray-700"></div>
            
            <button 
              className="flex items-center text-left rounded px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700"
              onClick={() => handleAddBlock('blockquote')}
            >
              <span className="text-lg">"</span>
              <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">–¶–∏—Ç–∞—Ç–∞</span>
            </button>
            
            <button 
              className="flex items-center text-left rounded px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700"
              onClick={() => handleAddBlock('codeBlock')}
            >
              <span className="text-lg">{`</>`}</span>
              <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">–ë–ª–æ–∫ –∫–æ–¥–∞</span>
            </button>

            <button 
              className="flex items-center text-left rounded px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700"
              onClick={() => handleAddBlock('horizontalRule')}
            >
              <span className="text-lg">‚Äî</span>
              <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è</span>
            </button>

            <button 
              className="flex items-center text-left rounded px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700"
              onClick={() => handleAddBlock('table')}
            >
              <span className="text-lg">‚äû</span>
              <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">–¢–∞–±–ª–∏—Ü–∞</span>
            </button>
            
            <button 
              className="flex items-center text-left rounded px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700"
              onClick={() => handleAddBlock('image')}
            >
              <span className="text-lg">üñºÔ∏è</span>
              <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</span>
            </button>
          </div>
        </div>
      </div>
      
      <div 
        className="fixed inset-0 z-40" 
        onClick={onClose}
      />
    </div>
  );
};

// –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏ –º–µ–Ω—é –±–ª–æ–∫–∞
const NewLineHandling = Extension.create({
  name: 'newLineHandling',
  
  addKeyboardShortcuts() {
    return {
      Enter: () => {
        const { selection } = this.editor.state;
        const { $anchor, empty } = selection;
        
        // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—É—Å—Ç–æ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π
        if (empty && $anchor.parent.type.name === 'paragraph' && $anchor.parent.textContent === '') {
          return this.editor.chain().focus().createParagraphNear().run();
        }
        
        // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ (–Ω–µ –ø—É—Å—Ç–æ–≥–æ), —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
        if ($anchor.pos === $anchor.end() && !empty) {
          return this.editor.chain().focus().createParagraphNear().run();
        }
        
        // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        return false;
      }
    };
  },
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ–Ω—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  addProseMirrorPlugins() {
    return [
      new Plugin({
        props: {
          handleClick: (view, pos, event) => {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –ø—Ä–æ–∏–∑–æ—à–µ–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º (–≤ –ø—É—Å—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞)
            const { state } = view;
            const docSize = state.doc.content.size;
            
            // –ï—Å–ª–∏ –∫–ª–∏–∫ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if (pos >= docSize - 2) {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
              this.editor.chain()
                .insertContentAt(docSize - 1, '<p></p>')
                .focus(docSize + 1)
                .run();
                
              return true;
            }
            
            return false;
          }
        }
      })
    ];
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSS –∫–ª–∞—Å—Å–æ–≤ –≤ HTML
const AllowClassesOnNodes = Extension.create({
  name: 'allowClassesOnNodes',
  
  addGlobalAttributes() {
    return [
      {
        types: [
          'paragraph',
          'heading',
          'blockquote',
          'bulletList',
          'orderedList',
          'listItem',
          'codeBlock',
          'horizontalRule',
          'image',
        ],
        attributes: {
          class: {
            default: null,
          },
          style: {
            default: null,
          },
          id: {
            default: null,
          },
        },
      },
      {
        types: ['div', 'span'],
        attributes: {
          class: {
            default: null,
          },
          style: {
            default: null,
          },
          id: {
            default: null,
          },
        },
      },
    ];
  },
});

interface RichTextEditorProps {
  content: string;
  onSave: (targetFolderId?: string | null, fileName?: string) => void;
  onChange: (value: string) => void;
  title?: string;
  withBackground?: boolean;
  format?: 'html' | 'markdown';
  itemId?: string;
  onEdit?: () => void;
  isEditing?: boolean;
  autoSave?: boolean;
  fileType?: string;
}

// –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
interface CustomEventMap {
  'block-menu-open': CustomEvent<{
    x: number;
    y: number;
    position: number;
  }>;
}

declare global {
  interface WindowEventMap extends CustomEventMap {}
}

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø—ã –∫–æ–º–∞–Ω–¥ TipTap
declare module '@tiptap/core' {
  interface Commands<ReturnType> {
    insertStyledHtmlBlock: {
      /**
       * –í—Å—Ç–∞–≤–ª—è–µ—Ç HTML –±–ª–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª–µ–π
       */
      insertStyledHtmlBlock: (html: string) => ReturnType;
    };
  }
}

export function RichTextEditor({
  content,
  onSave,
  onChange,
  title,
  withBackground = true,
  format = 'html',
  itemId,
  onEdit,
  isEditing = true,
  autoSave = true,
  fileType = 'article'
}: RichTextEditorProps) {
  const [showBlockSelector, setShowBlockSelector] = useState(false);
  const [blockSelectorPosition, setBlockSelectorPosition] = useState({ x: 0, y: 0 });
  const [selectionCoords, setSelectionCoords] = useState<{ x: number; y: number } | null>(null);
  const floatingButtonRef = useRef<HTMLButtonElement>(null);
  const editorContentRef = useRef<HTMLDivElement>(null);
  const toolbarRef = useRef<HTMLDivElement>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –±–ª–æ–∫–∞ (4 —Ç–æ—á–µ–∫)
  const [showHtmlBlockSelector, setShowHtmlBlockSelector] = useState(false);
  const [htmlBlockSelectorPosition, setHtmlBlockSelectorPosition] = useState({ x: 0, y: 0 });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –µ–≥–æ –∏–Ω–¥–∏–∫–∞—Ü–∏—è
  const [autoSaveState, setAutoSaveState] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const [currentContent, setCurrentContent] = useState(content);
  const [hasChanges, setHasChanges] = useState(false);
  const [lastSavedContent, setLastSavedContent] = useState<string>(content);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const { isSaving, saveError, forceSave, lastSaveResult } = useAutoSave(
    currentContent,
    async (contentToSave: string, id?: string) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      console.log(`–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${fileType} —Å ID ${id || itemId}`);
      return autoSaveService.saveItem(fileType, contentToSave, id || itemId);
    },
    400, // –∑–∞–¥–µ—Ä–∂–∫–∞ 400 –º—Å
    false, // –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫, –±—É–¥–µ–º —É–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ idle detection
    itemId
  );
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (lastSaveResult) {
      setHasChanges(false);
      setLastSavedContent(currentContent); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    }
  }, [lastSaveResult, currentContent]);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏
  const handleIdleSave = useCallback(() => {
    if (autoSave && itemId && hasChanges && !isSaving) {
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
      if (JSON.stringify(currentContent) !== JSON.stringify(lastSavedContent)) {
        console.log('–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        forceSave().then(() => {
          setHasChanges(false);
        }).catch(error => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
        });
      } else {
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        setHasChanges(false);
      }
    }
  }, [autoSave, itemId, hasChanges, isSaving, forceSave, currentContent, lastSavedContent]);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
  const { isIdle } = useIdleDetection(
    800, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 800–º—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
    handleIdleSave, // –≤—ã–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏
    ['keydown'] // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à, –ù–ï —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
  );

  const editor = useEditor({
    extensions: [
      StarterKit.configure({
        heading: {
          levels: [1, 2, 3]
        },
        blockquote: {
          HTMLAttributes: {
            class: 'border-l-4 border-gray-300 dark:border-gray-600 pl-4 my-4'
          }
        },
        code: {
          HTMLAttributes: {
            class: 'bg-gray-100 dark:bg-gray-800 rounded px-1 py-0.5 font-mono'
          }
        },
        codeBlock: false,
        paragraph: {
          HTMLAttributes: ({ node }: { node: { content: { size: number } } }) => ({
            class: `text-gray-900 dark:text-gray-100 leading-normal ${node.content.size === 0 ? 'is-empty' : ''}`,
          }),
        }
      }),
      Placeholder.configure({
        placeholder: ({ node }) => {
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º CSS
          return '';
        },
        emptyEditorClass: 'is-editor-empty',
        emptyNodeClass: 'is-empty',
        showOnlyWhenEditable: true,
        includeChildren: true,
      }),
      NewLineHandling,
      CodeBlockLowlight.configure({
        lowlight: lowlightPlugin,
        HTMLAttributes: {
          class: 'bg-gray-100 dark:bg-gray-800 rounded-lg p-4 font-mono my-4'
        }
      }),
      Link.configure({
        openOnClick: false,
        HTMLAttributes: {
          class: 'text-blue-600 dark:text-blue-400 hover:underline'
        }
      }),
      Table.configure({
        resizable: true,
        HTMLAttributes: {
          class: 'border-collapse table-auto w-full my-4'
        }
      }),
      TableRow.configure({
        HTMLAttributes: {
          class: 'border-b dark:border-gray-700'
        }
      }),
      TableHeader.configure({
        HTMLAttributes: {
          class: 'border-b-2 dark:border-gray-600 bg-gray-100 dark:bg-gray-800 font-bold p-2 text-left'
        }
      }),
      TableCell.configure({
        HTMLAttributes: {
          class: 'border dark:border-gray-700 p-2'
        }
      }),
      Image.configure({
        HTMLAttributes: {
          class: 'rounded-lg max-w-full'
        }
      }),
      TextAlign.configure({
        types: ['heading', 'paragraph'],
      }),
      TextStyle,
      Color,
      Highlight.configure({
        multicolor: true,
        HTMLAttributes: {
          class: 'text-orange-500 dark:text-orange-400 bg-transparent',
        }
      }),
      Typography,
      Underline,
      Subscript,
      Superscript,
      TaskList.configure({
        HTMLAttributes: {
          class: 'not-prose pl-0'
        }
      }),
      TaskItem.configure({
        HTMLAttributes: {
          class: 'flex items-start my-2'
        },
        nested: true
      }),
      AllowClassesOnNodes,
    ],
    content,
    editable: true,
    onUpdate: ({ editor }) => {
      const html = editor.getHTML();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      if (html !== currentContent) {
        console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–æ:', html.substring(0, 50) + '...');
        setCurrentContent(html); // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setHasChanges(true); // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        onChange(html); // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      }
    },
    autofocus: 'end',
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ props
  useEffect(() => {
    if (editor) {
      const editorContent = editor.getHTML();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ content –∏–ª–∏ itemId, –≤–∫–ª—é—á–∞—è –æ—á–∏—Å—Ç–∫—É content
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º (–ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞)
      if (editorContent !== content || (content === '' && editorContent !== '<p></p>')) {
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è props content');
        editor.commands.setContent(content || '<p></p>');
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–π–ª–∞
        setCurrentContent(content);
        setLastSavedContent(content);
        setHasChanges(false);
      }
    }
  }, [content, itemId, editor]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –∏–∑–≤–Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
  useEffect(() => {
    // –î–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–∏–ª—Å—è (—Å–º–µ–Ω–∏–ª—Å—è —Ñ–∞–π–ª),
    // –≤—Å—ë —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const contentChanged = content !== currentContent;
    const isContentReset = !content && currentContent; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ content —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º
    
    if (contentChanged && (isContentReset || !hasChanges)) {
      setCurrentContent(content);
      setLastSavedContent(content);
      setHasChanges(false);
    }
  }, [content, currentContent, hasChanges]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (isSaving) {
      setAutoSaveState('saving');
    } else if (saveError) {
      setAutoSaveState('error');
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', saveError);
    } else if (autoSaveState === 'saving') {
      setAutoSaveState('saved');
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "saved" —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      const timer = setTimeout(() => {
        setAutoSaveState('idle');
      }, 2000);
      return () => clearTimeout(timer);
    }
  }, [isSaving, saveError, autoSaveState]);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∏–∫–∞ –Ω–∞ –∏–∫–æ–Ω–∫—É
  useEffect(() => {
    if (!editor || !editorContentRef.current) return;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
    const handleSelectionChange = () => {
      if (editor.view.hasFocus() && !editor.state.selection.empty) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        const { from, to } = editor.state.selection;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        if (from !== to) {
          try {
            const view = editor.view;
            
            // –ü–æ–ª—É—á–∞–µ–º DOM-—Å–µ–ª–µ–∫—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            const selection = window.getSelection();
            if (!selection || selection.rangeCount === 0) return;
            
            const range = selection.getRangeAt(0);
            const rect = range.getBoundingClientRect();
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º rect –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            const centerX = rect.left + rect.width / 2;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –æ—Ç –≤–µ—Ä—Ö–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è (—Å—Ä–∞–∑—É –Ω–∞–¥ —Ç–µ–∫—Å—Ç–æ–º)
            const topOffset = rect.top - 94; // 65px –Ω–∞–¥ —Ç–µ–∫—Å—Ç–æ–º
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏
            setSelectionCoords({ 
              x: centerX, 
              y: topOffset
            });
          } catch (error) {
            console.error('Error getting selection coordinates:', error);
            setSelectionCoords(null);
          }
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è, —Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        setSelectionCoords(null);
      }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∏–∫–æ–Ω–∫—É –º–µ–Ω—é (4 —Ç–æ—á–µ–∫) –ø–µ—Ä–µ–¥ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º
    const handleEditorClick = (e: Event) => {
      const mouseEvent = e as MouseEvent;
      const target = mouseEvent.target as HTMLElement;
      const rect = target.getBoundingClientRect();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –Ω–∞ –∏–∫–æ–Ω–∫–µ –º–µ–Ω—é (–ø–µ—Ä–µ–¥ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º)
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–ª–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
      if (target.tagName === 'P' && mouseEvent.clientX < rect.left && mouseEvent.clientX > rect.left - 30) {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –Ω–æ–¥—ã –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        const pos = editor.view.posAtDOM(target, 0);
        if (pos !== null) {
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ
          editor.commands.setTextSelection(pos);
          
          // –û—Ç–∫—Ä—ã–≤–∞–µ–º HtmlBlockSelector –≤–º–µ—Å—Ç–æ BlockSelector
          setHtmlBlockSelectorPosition({ 
            x: rect.left, 
            y: rect.top 
          });
          setShowHtmlBlockSelector(true);
          
          mouseEvent.preventDefault();
          mouseEvent.stopPropagation();
        }
      }
    };

    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞
    const handleCombinedClick = (e: Event) => {
      // –£–±–∏—Ä–∞–µ–º setTimeout –∏ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
      handleSelectionChange();
      handleEditorClick(e);
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è selectionchange
    document.addEventListener('selectionchange', handleSelectionChange);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –¥–ª—è –∫–ª–∏–∫–∞ –Ω–∞ –∏–∫–æ–Ω–∫–µ 4 —Ç–æ—á–µ–∫
    const editorEl = editorContentRef.current.querySelector('.ProseMirror');
    editorEl?.addEventListener('click', handleCombinedClick);

    return () => {
      document.removeEventListener('selectionchange', handleSelectionChange);
      const editorEl = editorContentRef.current?.querySelector('.ProseMirror');
      editorEl?.removeEventListener('click', handleCombinedClick);
    };
  }, [editor]);

  // –§–æ–∫—É—Å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É—Å—Ç–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (editor) {
      editor.setEditable(true);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç –ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä
      if (editor.isEmpty) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—É—Å—Ç–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—É—Å—Ç
        editor.commands.setContent('<p></p>');
        editor.commands.focus('end');
      }
    }
  }, [editor]); // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–∞–º–æ–≥–æ editor

  const handleExportPDF = () => {
    if (!editor) return;

    const element = document.createElement('div');
    element.className = 'prose max-w-none p-8';
    element.style.color = '#000000';
    
    const styleElement = document.createElement('style');
    styleElement.textContent = `
      * {
        color: #000000 !important;
      }
      h1, h2, h3, h4, h5, h6 {
        color: #000000 !important;
        margin-bottom: 1em;
      }
      p {
        color: #000000 !important;
        margin-bottom: 0.5em;
      }
      a {
        color: #2563eb !important;
        text-decoration: underline;
      }
    `;
    element.appendChild(styleElement);
    
    const titleElement = document.createElement('h1');
    titleElement.style.fontSize = '24px';
    titleElement.style.fontWeight = 'bold';
    titleElement.style.marginBottom = '24px';
    titleElement.style.color = '#000000';
    titleElement.textContent = title || '–î–æ–∫—É–º–µ–Ω—Ç';
    
    element.appendChild(titleElement);
    
    const contentDiv = document.createElement('div');
    contentDiv.innerHTML = editor.getHTML();
    element.appendChild(contentDiv);

    const documentTitle = title || 'document';
    const opt = {
      margin: 10,
      filename: `${documentTitle.toLowerCase().replace(/\s+/g, '-')}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
    };

    // @ts-ignore
    html2pdf().set(opt).from(element).save();
  };

  const handleOpenBlockSelector = () => {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π BlockSelector –¥–ª—è –∫–Ω–æ–ø–∫–∏ "+"
    setBlockSelectorPosition({
      x: Math.max(100, window.innerWidth - 300),
      y: Math.max(100, window.innerHeight - 400)
    });
    setShowBlockSelector(true);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç–∞–≤–∫–∏ HTML –±–ª–æ–∫–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª–µ–π
  const insertStyledHtmlBlock = (editor: Editor, html: string): boolean => {
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ HTML –≤ DOM
      const div = document.createElement('div');
      div.innerHTML = html;
      
      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏–ª–∏ –∞—Ç—Ä–∏–±—É—Ç—ã
      
      // –í—Å—Ç–∞–≤–∫–∞ HTML —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏ —Å—Ç–∏–ª–µ–π
      editor.commands.insertContent({
        type: 'doc',
        content: [
          {
            type: 'html',
            content: [
              {
                type: 'text',
                text: html,
              },
            ],
          },
        ],
      });
      
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ HTML –±–ª–æ–∫–∞:', error);
      return false;
    }
  };
  
  // –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é insertContent –≤ BlockSelector
  useEffect(() => {
    if (editor) {
      // –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é insertStyledHtmlBlock —á–µ—Ä–µ–∑ API —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
      editor.commands.insertStyledHtmlBlock = (html: string) => insertStyledHtmlBlock(editor, html);
    }
  }, [editor]);

  // –ü–µ—Ä–µ–¥ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  useEffect(() => {
    return () => {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
      if (autoSave && itemId && hasChanges && !isSaving) {
        forceSave().catch(err => console.error('–û—à–∏–±–∫–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err));
      }
    };
  }, [autoSave, itemId, hasChanges, isSaving, forceSave]);

  return (
    <div className={withBackground ? "bg-white dark:bg-gray-800 rounded-xl p-8" : ""}>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
          {title}
        </h2>
      </div>

      <div className="relative">
        {editor && selectionCoords && (
          <div 
            ref={toolbarRef}
            className="floating-toolbar"
            style={{
              position: 'fixed',
              top: `${selectionCoords.y}px`,
              left: `${selectionCoords.x}px`,
              transform: 'translate(-50%, -100%)'
            }}
          >
            <Toolbar editor={editor} />
          </div>
        )}

        <div 
          className="prose dark:prose-invert max-w-none" 
          ref={editorContentRef}
        >
          <EditorContent editor={editor} />
        </div>
      </div>

      {editor && (
        <>
          <BlockSelector
            editor={editor}
            isOpen={showBlockSelector}
            onClose={() => setShowBlockSelector(false)}
            position={blockSelectorPosition}
          />
          
          <HtmlBlockSelector
            editor={editor}
            isOpen={showHtmlBlockSelector}
            onClose={() => setShowHtmlBlockSelector(false)}
            position={htmlBlockSelectorPosition}
          />
        </>
      )}
    </div>
  );
}
